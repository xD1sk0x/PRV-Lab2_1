#include <semaphore>
#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <chrono>
#include <algorithm>
#include <atomic>

std::counting_semaphore<10> sem1(5);

class ThreadTask{
    private:
        int id;
        int priority;
        int task;
    public:
        ThreadTask(int i, int p, int t):
            id(i), priority(p), task(t){}
        int getId(){
            return id;
        }
        int getPriority(){
            return priority;
        }
        int getTask(){
            return task;
        }
        bool operator<(const ThreadTask& other) const {
            return priority > other.priority; 
        }       
};

class TaskQueue{
    private:
        std::vector<ThreadTask> tasks;
        std::mutex queue_mutex;
    public:
        void addTask(ThreadTask task){
            std::lock_guard lock(queue_mutex);
            tasks.push_back(task);
            std::sort(tasks.begin(),tasks.end());
        }
        bool getNextTask(ThreadTask& task){
            std::lock_guard lock(queue_mutex);
            if(tasks.empty()) return false;

            task = tasks.back();
            tasks.pop_back();
            return true;
        }

};

void dataSending(TaskQueue& tasks, int potokId){
    for(int i = 1; i <= 30; i++){
        tasks.addTask(ThreadTask(potokId * 100 + i, rand() % 4 + 1, rand() % 3 + 1));
        std::this_thread::sleep_for(std::chrono::milliseconds(25));
    }
}

void dataProcessing(TaskQueue& tasks,std::atomic<int>& semaphore, std::atomic<int>& maxSemaphore){
    std::mutex cout_mutex;
    for(int i = 1; i <= 30; i++){
    ThreadTask task(0,0,0);
    if(!tasks.getNextTask(task)) continue;
    int id = task.getId();
    int k = 1;

    if(semaphore/ maxSemaphore * 100 >= 50 && maxSemaphore > 1){
        maxSemaphore--;
        k--;
        
    }

    if(semaphore / maxSemaphore * 100 <= 20 && maxSemaphore < 10 && maxSemaphore > 0){
        maxSemaphore++;
        semaphore++;
        k++;
    }

    sem1.acquire();
    semaphore--;

    switch(task.getTask()){
        case 1:
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
        break;
        case 2:
        std::this_thread::sleep_for(std::chrono::milliseconds(20));
        break;
        case 3:
        std::this_thread::sleep_for(std::chrono::milliseconds(30));
        break;
        default:
        std::cerr << "Unknown type of the data packet" << std::endl;
    }

    std::lock_guard<std::mutex> lock(cout_mutex);
    std::cout << "Processing of the data packet " << id << " completed" << std::endl;

    sem1.release(k);
    semaphore++;
    }
}

int main(){
    std::srand(std::time(nullptr));
    TaskQueue tasks;
    std::atomic<int> semaphore = 5;
    std::atomic<int> maxSemaphore = 5;

    std::thread threads[10];
    for(int i = 0; i < 10; i++){
        threads[i] = std::thread(dataSending, std::ref(tasks), i);
    }

    for (auto& t: threads){
        t.join();
    }

    std::thread threads1[10];
    for(int i = 0; i < 10; i++){
        threads1[i] = std::thread(dataProcessing, std::ref(tasks), std::ref(semaphore), std::ref(maxSemaphore));
    }

    for (auto& t: threads1){
        t.join();
    }


    return 0;
}
